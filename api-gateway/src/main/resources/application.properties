spring.application.name=api-gateway
server.port=8765

eureka.client.service-url.defaultZone=http://localhost:8761/eureka

#Read Below for more information
#Here if we want to customize the route on own check the ApiGatewayConfiguration.java
#spring.cloud.gateway.discovery.locator.enabled=true
#spring.cloud.gateway.discovery.locator.lower-case-service-id=true






#What is an API Gateway?
#An API Gateway is a central entry point for all client requests in a microservices architecture.
# Instead of calling multiple services directly, clients send requests to the API Gateway, which then routes them
# to the appropriate microservices.

#Key Features of API Gateway
#? Single Entry Point: Clients only communicate with the API Gateway, not individual microservices.
#? Request Routing: Routes requests to the correct microservice.
#? Load Balancing: Distributes requests across multiple instances.
#? Authentication & Security: Centralized authentication & authorization (e.g., JWT, OAuth).
#? Rate Limiting: Prevents abuse by limiting request rates.
#? Response Aggregation: Combines data from multiple services into a single response.
#? Logging & Monitoring: Tracks API usage and performance.

#How API Gateway Works?
#Example: E-Commerce Application
#Imagine an E-commerce system with the following microservices:
#1?? User Service (/users) ? Manages users
#2?? Product Service (/products) ? Lists products
#3?? Order Service (/orders) ? Manages orders

#Without an API Gateway, the frontend must call multiple services directly:
#Frontend ? GET http://user-service:8081/users/1
#Frontend ? GET http://product-service:8082/products/5
#Frontend ? GET http://order-service:8083/orders/1

#With an API Gateway, the frontend only interacts with the gateway, which routes requests internally:
#Frontend ? GET http://api-gateway:8080/users/1
#Frontend ? GET http://api-gateway:8080/products/5
#Frontend ? GET http://api-gateway:8080/orders/1

#How to Implement API Gateway in Spring Boot?
#We'll use Spring Cloud Gateway, which is built on Spring WebFlux and provides powerful API Gateway features.

#Step 1: Add Dependencies
#spring-cloud-starter-gateway ? API Gateway dependency
#? spring-cloud-starter-netflix-eureka-client ? Enables service discovery
#? spring-boot-starter-actuator ? Enables monitoring

#Step 2: Enable API Gateway in Spring Boot
#Create a Spring Boot Application and enable it as a Gateway.
#@EnableDiscoveryClient ? Enables service discovery (if using Eureka).

#Step 3: Configure Routes in application.properties
#Define routing rules to redirect requests from the API Gateway to the respective microservices.

#Step 4: Register Microservices with Eureka


#Why Use an API Gateway?
#Without API GateWay: --
#Feature :
# Client Complexity  -> High (multiple calls)
#Service Discovery   -> Hardcoded URLs
#Security            -> Weak (no centralized auth)
#Load Balancing      -> Manual
#Rate Limiting       -> Difficult

#With API GateWay: --
#Feature :
# Client Complexity  -> Low (single entry point)
#Service Discovery   -> Dynamic via Eureka
#Security            -> Strong (JWT, OAuth)
#Load Balancing      -> Automatic via Ribbon
#Rate Limiting       -> Easy with Spring Cloud Gateway


#Conclusion
#? API Gateway simplifies microservices communication by providing a single entry point.
#? It enables routing, authentication, logging, monitoring, and rate limiting.
#? Using Spring Cloud Gateway with Eureka allows seamless integration and scalability.



#NOTE:---------------------
#What is use of spring.cloud.gateway.discovery.locator.enabled=true
#When spring.cloud.gateway.discovery.locator.enabled=true is set, Spring Cloud Gateway automatically
# creates routes for all registered microservices in Eureka Server. This means you don?t need to manually
# configure routes in application.yml or application.properties.

#Without discovery.locator.enabled (Manual Route Configuration):-
#spring.cloud.gateway.routes[0].id=user-service
#spring.cloud.gateway.routes[0].uri=lb://USER-SERVICE
#spring.cloud.gateway.routes[0].predicates[0]=Path=/users/**

#With discovery.locator.enabled=true (Automatic Routing)
#If you enable discovery.locator.enabled=true, Spring Cloud Gateway automatically detects
#spring.cloud.gateway.discovery.locator.enabled=true
#spring.cloud.gateway.discovery.locator.lower-case-service-id=true


#Benefits of discovery.locator.enabled=true
#? No Manual Route Configuration ? Routes are auto-generated from Eureka.
#? Dynamic Service Discovery ? If a new service registers in Eureka, it?s instantly available via the gateway.
#? Easier Maintenance ? No need to update the gateway when adding new services.
#? Load Balancing ? Automatically routes traffic to available instances.







