spring.application.name=currency-exchange
server.port=8000

#For more understanding check the properties file of limit service
spring.config.import=optional:configserver:http://localhost:8888

#Define the H2 Database
spring.jpa.show-sql=true
spring.datasource.url=jdbc:h2:mem:testdb
spring.h2.console.enable=true

#The spring.jpa.defer-datasource-initialization property in Spring Boot is used to control the order
# in which the database schema and data are initialized in relation to JPA (Java Persistence API) initialization.
# This is particularly useful when you have SQL scripts (schema.sql, data.sql) and JPA entities both
# participating in the database setup process.
#When set to true, it defers the execution of SQL initialization scripts (schema.sql and data.sql) until after JPA initialization is complete.
spring.jpa.defer-datasource-initialization=true


eureka.client.service-url.defaultZone=http://localhost:8761/eureka



# Resilience4j Retry Configuration
resilience4j.retry.instances.sample-api.enabled=true
resilience4j.retry.instances.sample-api.maxAttempts=3
resilience4j.retry.instances.sample-api.waitDuration=2s
resilience4j.retry.instances.sample-api.enableExponentialBackoff=true
#resilience4j.retry.instances.sample-api.retryExceptions=java.io.IOException, org.springframework.web.client.HttpServerErrorException


# Resilience4j Circuit Breaker Configuration
resilience4j.circuitbreaker.instances.sample-api.enabled=true
resilience4j.circuitbreaker.instances.sample-api.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.sample-api.failureRateThreshold=90
resilience4j.circuitbreaker.instances.sample-api.slidingWindowSize=100
resilience4j.circuitbreaker.instances.sample-api.permittedNumberOfCallsInHalfOpenState=10
resilience4j.circuitbreaker.instances.sample-api.waitDurationInOpenState=10000ms
resilience4j.circuitbreaker.instances.sample-api.automaticTransitionFromOpenToHalfOpenEnabled=true

management.health.circuitbreakers.enabled=true
management.endpoint.health.show-details=always


# Resilience4j Rate Limiter Configuration
resilience4j.ratelimiter.instances.default.enabled=true
resilience4j.ratelimiter.instances.default.limitForPeriod=2
resilience4j.ratelimiter.instances.default.limitRefreshPeriod=10s
resilience4j.ratelimiter.instances.default.timeoutDuration=1000ms


# Resilience4j Bulkhead Configuration
resilience4j.bulkhead.instances.sample-api.enabled=true
resilience4j.bulkhead.instances.sample-api.maxConcurrentCalls=10
resilience4j.bulkhead.instances.sample-api.maxWaitDuration=500ms








#------------------------------------------------------------------------------------------------------------------

#Summary of Circuit Breaker States
#CLOSED -> Service is working fine. All requests are allowed.
#OPEN -> Too many failures. Requests fail immediately without calling the service.
#HALF_OPEN -> Test phase. Some requests are allowed to check if the service is healthy.

#Resilience4j Circuit Breaker Configuration Explain

#1. Enabling Circuit Breaker
#resilience4j.circuitbreaker.instances.serviceA.enabled=true

#Purpose:
#Enables the circuit breaker for serviceA.
#Example:
#If this is set to false, the circuit breaker will not be applied to serviceA.


#2. Register Health Indicator
#resilience4j.circuitbreaker.instances.serviceA.registerHealthIndicator=true
#Purpose:
#Registers a health indicator for this circuit breaker in Spring Boot Actuator.
#It allows monitoring the circuit breaker state (CLOSED, OPEN, HALF_OPEN) using Actuator endpoints.

#Example:
#If enabled, you can check the circuit breaker state at:
#http://localhost:8080/actuator/health

#3. Failure Rate Threshold
#resilience4j.circuitbreaker.instances.serviceA.failureRateThreshold=50
#Purpose:
#Defines the percentage of failed requests required to OPEN the circuit breaker.
#If 50% or more requests fail, the circuit breaker trips to OPEN state.

#Example:
#If 10 requests are sent and 5 or more fail, the circuit breaker opens.
#In the OPEN state, further requests will fail immediately without calling the service.

#4. Sliding Window Size
#resilience4j.circuitbreaker.instances.serviceA.slidingWindowSize=100
#Purpose:
#Determines how many requests are considered when calculating the failure rate.
#A window of 100 requests means only the latest 100 requests are analyzed to decide whether to trip the circuit breaker.

#Example:
#If slidingWindowSize=10, the failure rate is calculated from the last 10 requests.
#If slidingWindowSize=100, the failure rate is calculated from the last 100 requests.
#Useful for controlling how quickly the circuit breaker reacts to failures.

#5. Permitted Number of Calls in Half-Open State
#resilience4j.circuitbreaker.instances.serviceA.permittedNumberOfCallsInHalfOpenState=10
#Purpose:
#When the circuit breaker transitions from OPEN ? HALF_OPEN, it allows 10 test calls to check if the service has recovered.
#If these test calls succeed, the circuit breaker goes back to CLOSED.
#If failures exceed failureRateThreshold, it goes back to OPEN.

#Example:
#Circuit is OPEN due to failures.
#After waitDurationInOpenState, it transitions to HALF_OPEN.
#First 10 requests are tested:
#If all 10 succeed, circuit moves to CLOSED.
#If 5 out of 10 fail (since failureRateThreshold=50), circuit stays OPEN.

#6. Wait Duration in Open State
#resilience4j.circuitbreaker.instances.serviceA.waitDurationInOpenState=10000ms
#Purpose:
#Defines how long the circuit breaker stays OPEN before trying requests in the HALF_OPEN state.
#In this example, 10 seconds (10000ms).

#Example:
#Circuit breaker opens at 12:00:00 PM due to high failure rate.
#For the next 10 seconds, all requests are immediately rejected.
#At 12:00:10 PM, it transitions to HALF_OPEN and allows test calls.

#7. Automatic Transition from OPEN to HALF-OPEN
#resilience4j.circuitbreaker.instances.serviceA.automaticTransitionFromOpenToHalfOpenEnabled=true
#Purpose:
#When true, the circuit breaker automatically moves from OPEN ? HALF_OPEN after waitDurationInOpenState expires.
#If false, you need manual intervention to reset the circuit breaker.

#Example:
#If a service recovers within 10 seconds, the circuit breaker automatically tests it by moving to HALF_OPEN.
#If false, the service remains stuck in OPEN state until an admin resets it.

#-----------------------------------------------------------------------------------------------------------------------------------

#Resilience4j Rate Limiter Configuration Explain

#1. enabled=true
#resilience4j.ratelimiter.instances.default.enabled=true
#? Purpose:
#Enables the rate limiter for the default service instance.

#? Example:
#If set to false, rate limiting won't be applied to this service.

#2. limitForPeriod=2
#resilience4j.ratelimiter.instances.default.limitForPeriod=2
#? Purpose:
#Defines the maximum number of allowed requests within a refresh period (limitRefreshPeriod).
#Here, only 2 requests are allowed in every 10 seconds (limitRefreshPeriod).

#? Example:
#A user sends 2 requests within 10 seconds ? ? Allowed
#A user sends a 3rd request before 10 seconds ? ? Blocked (Rate limit exceeded)
#After 10 seconds, the counter resets, and new requests are allowed.

#3. limitRefreshPeriod=10s
#resilience4j.ratelimiter.instances.default.limitRefreshPeriod=10s
#? Purpose:
#Defines the time window for the request limit reset.
#Here, every 10 seconds, the counter resets.

#? Example:
#If a user sends 2 requests within 10 seconds, they are allowed.
#If they try a 3rd request within the same 10 seconds, it is blocked.
#After 10 seconds, the limit resets, and 2 more requests can be made.

#4. timeoutDuration=1000ms
#resilience4j.ratelimiter.instances.default.timeoutDuration=1000ms
#? Purpose:
#Defines the maximum time a request will wait if the limit is exceeded.
#If a request is blocked due to rate limiting, it will wait for 1000ms (1 second) before failing.

#? Example:
#If timeoutDuration=1000ms, a blocked request waits 1 second before returning a failure.
#If timeoutDuration=0ms, blocked requests fail immediately.

#-------------------------------------------------------------------------------------------------------------

# Resilience4j Bulkhead Configuration Explain

#1. enabled=true
#resilience4j.bulkhead.instances.sample-api.enabled=true
#? Purpose:
#Enables bulkhead protection for the sample-api service.

#? Example:
#If set to false, bulkhead protection is disabled.

#2. maxConcurrentCalls=10
#resilience4j.bulkhead.instances.sample-api.maxConcurrentCalls=10
#? Purpose:
#Defines the maximum number of concurrent requests that can be processed simultaneously by sample-api.
#If more than 10 concurrent requests arrive, additional requests are blocked or wait (based on maxWaitDuration).

#? Example:
#If 10 requests are processing at the same time, the 11th request must wait or fail.

#----------------------------------------------------------------------------------------------------------------









