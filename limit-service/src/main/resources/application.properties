spring.application.name=limit-service


#Here we are using the config server
#If we are trying to get teh properties for the configuration for the limit-server
#The server will first check on the url path http://localhost:8888 if the properties is available and server is up
#Then take that properties from there and if the properties is not available or server is not up then only it will take
#properties from here
#Note: We need the spring-cloud-starter-config client config dependency into the pom.xml file.
#How work:-
#It generate the url : http://localhost:8888/limit-service/default
#Here name= limit-service and profiles = default

spring.config.import=optional:configserver:http://localhost:8888

#If we have multiple config properties and if we not define anything it will only take the default profile
#But if we want to act on a specific profile then we should use below properties

spring.profiles.active=dev

#However if we use the above properties then spring will take the defile properties but it will also take the default too
#If we don't want to take the default value along with define profile then we should use the below properties.

spring.cloud.config.profile=dev

limit-service.maximum=2000
limit-service.minimum=50

server.port=8080


#Difference between spring.profiles.active and spring.cloud.config.profile
#spring.profiles.active:
#Commonly used to control which profile-specific configuration is loaded at runtime.
#Purpose: Activates a specific profile in the local application's configuration.
#Scope: Local configuration

#spring.cloud.config.profile
#Controls which set of configurations (profile) the application retrieves from the Config Server.
#Purpose: Determines the profile to fetch from the Spring Cloud Config Server.
#Scope: Remote configuration (Config Server)


#Why we can use both?
#If your application fetches all configuration exclusively from the Config Server, you can often set only
# spring.cloud.config.profile and rely on that for everything. However, for local or hybrid setups,
# having both ensures greater flexibility and control.
