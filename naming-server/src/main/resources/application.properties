spring.application.name=naming-server
server.port=8761


eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false



#Eureka Server is a part of the Netflix OSS stack and is used for service discovery in microservices architecture.
# It acts as a registry server where all microservices register themselves and discover other services
# without hardcoding their locations (e.g., IP address and port).

#Key Features of Eureka Server
#Service Registry: Maintains a registry of all available microservices.
#Service Discovery: Enables microservices to locate and communicate with each other dynamically.
#Load Balancing: Works with clients like Ribbon to distribute requests among instances.
#Fault Tolerance: Removes unavailable services from the registry after a specified timeout.
#Dynamic Scaling: Automatically updates the registry as services scale up or down.



#How to use Eureka for Server:
#1. Add Dependency as Eureka Server
#2. In your Spring Boot application, annotate the main application class with @EnableEurekaServer.
#3 Provide the necessary configurations for the Eureka Server.
#For application.properties:

#eureka.client.register-with-eureka=false
#eureka.client.fetch-registry=false

#register-with-eureka: Prevents the Eureka server from trying to register itself as a client.
#fetch-registry: Prevents the Eureka server from fetching the registry from another server (used in clusters).

#How to use Eureka for Client:
#1. Add Dependency as Eureka Client
#2. Annotate the main application class with @EnableEurekaClient (optional as Spring Boot auto-configures it).
#3. Configure application.properties
#eureka.client.service-url.defaultZone=http://localhost:8761/eureka

#How Service Discovery Works
#Registration: Each service registers with the Eureka Server by sending its metadata (e.g., name, IP, port).
#Heartbeat: Services periodically send a heartbeat to confirm they are alive.
#Discovery: Services query Eureka Server to discover other services dynamically.




